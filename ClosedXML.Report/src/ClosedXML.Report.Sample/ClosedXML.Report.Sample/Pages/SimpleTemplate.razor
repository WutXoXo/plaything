@page "/simple-template"

@using ClosedXML.Report.Sample.Services.Abstractions
@using ClosedXML.Report.Sample.Entities.Sqlite
@using ClosedXML.Report.Sample.Models
@inject IProductService productService

<h3>Product List</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Barcode</th>
                <th>Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Manage</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Barcode</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Quantity</td>
                    <td>
                        <button class="btn btn-info">Export excel</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductEntity> products;

    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetProductAsync();
    }
    private async Task ExportExcel(long id)
    {
        ProductEntity product = products.Find(f => f.Id == id);
        if (product != null)
        {
            ProductModel productModel = new ProductModel()
            {
                Id = product.Id,
                Code = product.Code,
                Barcode = product.Barcode,
                Description = product.Description,
                Name = product.Name,
                Price =product.Price,
                Quantity = product.Quantity
            };
            const string outputFile = @".\Output\report.xlsx";
            var template = new XLTemplate(@".\Templates\report.xlsx");
            template.AddVariable(productModel);
            template.Generate();
            //template.Workbook.
        }

    }
}
